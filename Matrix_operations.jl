using LinearAlgebra
using Base.Threads
using Distributed

#Equations for inverting a 4x4 matrix were prepared using Wolfram Mathematica and SymPy.

#A = {{a11, a12, a13, a14}, {a21, a22, a23, a24}, {a31, a32, a33, a34}, {a41, a42, a43, a44}}
#Inverse[A]


function inverse_4x4(matrix::Matrix{Float64})
    a11, a12, a13, a14 = matrix[1, 1], matrix[1, 2], matrix[1, 3], matrix[1, 4]
    a21, a22, a23, a24 = matrix[2, 1], matrix[2, 2], matrix[2, 3], matrix[2, 4]
    a31, a32, a33, a34 = matrix[3, 1], matrix[3, 2], matrix[3, 3], matrix[3, 4]
    a41, a42, a43, a44 = matrix[4, 1], matrix[4, 2], matrix[4, 3], matrix[4, 4]

    det = a14*a23*a32*a41 - a13*a24*a32*a41 - a14*a22*a33*a41 + a12*a24*a33*a41 + a13*a22*a34*a41 - a12*a23*a34*a41 -
          a14*a23*a31*a42 + a13*a24*a31*a42 + a14*a21*a33*a42 - a11*a24*a33*a42 - a13*a21*a34*a42 + a11*a23*a34*a42 +
          a14*a22*a31*a43 - a12*a24*a31*a43 - a14*a21*a32*a43 + a11*a24*a32*a43 + a12*a21*a34*a43 - a11*a22*a34*a43 -
          a13*a22*a31*a44 + a12*a23*a31*a44 + a13*a21*a32*a44 - a11*a23*a32*a44 - a12*a21*a33*a44 + a11*a22*a33*a44

    if det == 0
        error("The Matrix 4x4 is singular!")
    end

    @inbounds inv_matrix = [
        ( -a24*a33*a42 + a23*a34*a42 + a24*a32*a43 - a22*a34*a43 - a23*a32*a44 + a22*a33*a44 )/ det,
        ( a14*a33*a42 - a13*a34*a42 - a14*a32*a43 + a12*a34*a43 + a13*a32*a44 - a12*a33*a44 ) / det,
        ( -a14*a23*a42 + a13*a24*a42 + a14*a22*a43 - a12*a24*a43 - a13*a22*a44 + a12*a23*a44 )/ det,
        ( a14*a23*a32 - a13*a24*a32 - a14*a22*a33 + a12*a24*a33 + a13*a22*a34 - a12*a23*a34 ) / det,

        ( a24*a33*a41 - a23*a34*a41 - a24*a31*a43 + a21*a34*a43 + a23*a31*a44 - a21*a33*a44 ) / det,
        ( -a14*a33*a41 + a13*a34*a41 + a14*a31*a43 - a11*a34*a43 - a13*a31*a44 + a11*a33*a44 )/ det,
        ( a14*a23*a41 - a13*a24*a41 - a14*a21*a43 + a11*a24*a43 + a13*a21*a44 - a11*a23*a44 ) / det,
        ( -a14*a23*a31 + a13*a24*a31 + a14*a21*a33 - a11*a24*a33 - a13*a21*a34 + a11*a23*a34 )/ det,

        ( -a24*a32*a41 + a22*a34*a41 + a24*a31*a42 - a21*a34*a42 - a22*a31*a44 + a21*a32*a44 )/ det,
        ( a14*a32*a41 - a12*a34*a41 - a14*a31*a42 + a11*a34*a42 + a12*a31*a44 - a11*a32*a44 ) / det,
        ( -a14*a22*a41 + a12*a24*a41 + a14*a21*a42 - a11*a24*a42 - a12*a21*a44 + a11*a22*a44 )/ det,
        ( a14*a22*a31 - a12*a24*a31 - a14*a21*a32 + a11*a24*a32 + a12*a21*a34 - a11*a22*a34 ) / det,

        ( a23*a32*a41 - a22*a33*a41 - a23*a31*a42 + a21*a33*a42 + a22*a31*a43 - a21*a32*a43 ) / det,
        ( -a13*a32*a41 + a12*a33*a41 + a13*a31*a42 - a11*a33*a42 - a12*a31*a43 + a11*a32*a43 )/ det,
        ( a13*a22*a41 - a12*a23*a41 - a13*a21*a42 + a11*a23*a42 + a12*a21*a43 - a11*a22*a43 ) / det,
        ( -a13*a22*a31 + a12*a23*a31 + a13*a21*a32 - a11*a23*a32 - a12*a21*a33 + a11*a22*a33 )/ det
    ]
    
    return reshape(inv_matrix, 4, 4)
end

# For calculating sqrt(-g), where g is the determinant of the metric

function sqrt_g(matrix::Matrix{Float64})
    a11, a12, a13, a14 = matrix[1, 1], matrix[1, 2], matrix[1, 3], matrix[1, 4]
    a21, a22, a23, a24 = matrix[2, 1], matrix[2, 2], matrix[2, 3], matrix[2, 4]
    a31, a32, a33, a34 = matrix[3, 1], matrix[3, 2], matrix[3, 3], matrix[3, 4]
    a41, a42, a43, a44 = matrix[4, 1], matrix[4, 2], matrix[4, 3], matrix[4, 4]
    
    det = a14*a23*a32*a41 - a13*a24*a32*a41 - a14*a22*a33*a41 + a12*a24*a33*a41 + a13*a22*a34*a41 - a12*a23*a34*a41 -
          a14*a23*a31*a42 + a13*a24*a31*a42 + a14*a21*a33*a42 - a11*a24*a33*a42 - a13*a21*a34*a42 + a11*a23*a34*a42 +
          a14*a22*a31*a43 - a12*a24*a31*a43 - a14*a21*a32*a43 + a11*a24*a32*a43 + a12*a21*a34*a43 - a11*a22*a34*a43 -
          a13*a22*a31*a44 + a12*a23*a31*a44 + a13*a21*a32*a44 - a11*a23*a32*a44 - a12*a21*a33*a44 + a11*a22*a33*a44

    if det >= 0
        error("The determinant is non-negative, cannot compute sqrt of a non-negative value.")
    end

    return sqrt(-det)
end


function inverse_5x5(matrix::Matrix{Float64})
    a11, a12, a13, a14, a15 = matrix[1, 1], matrix[1, 2], matrix[1, 3], matrix[1, 4], matrix[1, 5]
    a21, a22, a23, a24, a25 = matrix[2, 1], matrix[2, 2], matrix[2, 3], matrix[2, 4], matrix[2, 5]
    a31, a32, a33, a34, a35 = matrix[3, 1], matrix[3, 2], matrix[3, 3], matrix[3, 4], matrix[3, 5]
    a41, a42, a43, a44, a45 = matrix[4, 1], matrix[4, 2], matrix[4, 3], matrix[4, 4], matrix[4, 5]
    a51, a52, a53, a54, a55 = matrix[5, 1], matrix[5, 2], matrix[5, 3], matrix[5, 4], matrix[5, 5]
    
    det = a11*a22*a33*a44*a55 - a11*a22*a33*a45*a54 - a11*a22*a34*a43*a55 + a11*a22*a34*a45*a53 + a11*a22*a35*a43*a54 - a11*a22*a35*a44*a53 - a11*a23*a32*a44*a55 + a11*a23*a32*a45*a54 + a11*a23*a34*a42*a55 - a11*a23*a34*a45*a52 - a11*a23*a35*a42*a54 + a11*a23*a35*a44*a52 + a11*a24*a32*a43*a55 - a11*a24*a32*a45*a53 - a11*a24*a33*a42*a55 + a11*a24*a33*a45*a52 + a11*a24*a35*a42*a53 - a11*a24*a35*a43*a52 - a11*a25*a32*a43*a54 + a11*a25*a32*a44*a53 + a11*a25*a33*a42*a54 - a11*a25*a33*a44*a52 - a11*a25*a34*a42*a53 + a11*a25*a34*a43*a52 - a12*a21*a33*a44*a55 + a12*a21*a33*a45*a54 + a12*a21*a34*a43*a55 - a12*a21*a34*a45*a53 - a12*a21*a35*a43*a54 + a12*a21*a35*a44*a53 + a12*a23*a31*a44*a55 - a12*a23*a31*a45*a54 - a12*a23*a34*a41*a55 + a12*a23*a34*a45*a51 + a12*a23*a35*a41*a54 - a12*a23*a35*a44*a51 - a12*a24*a31*a43*a55 + a12*a24*a31*a45*a53 + a12*a24*a33*a41*a55 - a12*a24*a33*a45*a51 - a12*a24*a35*a41*a53 + a12*a24*a35*a43*a51 + a12*a25*a31*a43*a54 - a12*a25*a31*a44*a53 - a12*a25*a33*a41*a54 + a12*a25*a33*a44*a51 + a12*a25*a34*a41*a53 - a12*a25*a34*a43*a51 + a13*a21*a32*a44*a55 - a13*a21*a32*a45*a54 - a13*a21*a34*a42*a55 + a13*a21*a34*a45*a52 + a13*a21*a35*a42*a54 - a13*a21*a35*a44*a52 - a13*a22*a31*a44*a55 + a13*a22*a31*a45*a54 + a13*a22*a34*a41*a55 - a13*a22*a34*a45*a51 - a13*a22*a35*a41*a54 + a13*a22*a35*a44*a51 + a13*a24*a31*a42*a55 - a13*a24*a31*a45*a52 - a13*a24*a32*a41*a55 + a13*a24*a32*a45*a51 + a13*a24*a35*a41*a52 - a13*a24*a35*a42*a51 - a13*a25*a31*a42*a54 + a13*a25*a31*a44*a52 + a13*a25*a32*a41*a54 - a13*a25*a32*a44*a51 - a13*a25*a34*a41*a52 + a13*a25*a34*a42*a51 - a14*a21*a32*a43*a55 + a14*a21*a32*a45*a53 + a14*a21*a33*a42*a55 - a14*a21*a33*a45*a52 - a14*a21*a35*a42*a53 + a14*a21*a35*a43*a52 + a14*a22*a31*a43*a55 - a14*a22*a31*a45*a53 - a14*a22*a33*a41*a55 + a14*a22*a33*a45*a51 + a14*a22*a35*a41*a53 - a14*a22*a35*a43*a51 - a14*a23*a31*a42*a55 + a14*a23*a31*a45*a52 + a14*a23*a32*a41*a55 - a14*a23*a32*a45*a51 - a14*a23*a35*a41*a52 + a14*a23*a35*a42*a51 + a14*a25*a31*a42*a53 - a14*a25*a31*a43*a52 - a14*a25*a32*a41*a53 + a14*a25*a32*a43*a51 + a14*a25*a33*a41*a52 - a14*a25*a33*a42*a51 + a15*a21*a32*a43*a54 - a15*a21*a32*a44*a53 - a15*a21*a33*a42*a54 + a15*a21*a33*a44*a52 + a15*a21*a34*a42*a53 - a15*a21*a34*a43*a52 - a15*a22*a31*a43*a54 + a15*a22*a31*a44*a53 + a15*a22*a33*a41*a54 - a15*a22*a33*a44*a51 - a15*a22*a34*a41*a53 + a15*a22*a34*a43*a51 + a15*a23*a31*a42*a54 - a15*a23*a31*a44*a52 - a15*a23*a32*a41*a54 + a15*a23*a32*a44*a51 + a15*a23*a34*a41*a52 - a15*a23*a34*a42*a51 - a15*a24*a31*a42*a53 + a15*a24*a31*a43*a52 + a15*a24*a32*a41*a53 - a15*a24*a32*a43*a51 - a15*a24*a33*a41*a52 + a15*a24*a33*a42*a51

    if det == 0
        error("The Matrix 5x5 is singular!")
    end

@inbounds inv_matrix = [-a22*(-a33*(a44*a55 - a45*a54) - a34*(a43*a44 + a45*a53) - a35*(a43*a54 + a53*a55) + (-a44 - a55)*(-a34*a43 - a35*a53)) - a23*(a33*(a32*a33 + a34*a42 + a35*a52) + a34*(a32*a43 + a42*a44 + a45*a52) + a35*(a32*a53 + a42*a54 + a52*a55)) - a24*(a43*(a32*a33 + a34*a42 + a35*a52) + a44*(a32*a43 + a42*a44 + a45*a52) + a45*(a32*a53 + a42*a54 + a52*a55)) - a25*(a53*(a32*a33 + a34*a42 + a35*a52) + a54*(a32*a43 + a42*a44 + a45*a52) + a55*(a32*a53 + a42*a54 + a52*a55)) + (-a33 - a44 - a55)*(-a23*(a32*a33 + a34*a42 + a35*a52) - a24*(a32*a43 + a42*a44 + a45*a52) - a25*(a32*a53 + a42*a54 + a52*a55)) + (-a23*a32 - a24*a42 - a25*a52)*(-a33*(-a44 - a55) - a34*a43 - a35*a53 + a44*a55 - a45*a54) a12*(-a33*(a44*a55 - a45*a54) - a34*(a43*a44 + a45*a53) - a35*(a43*a54 + a53*a55) + (-a44 - a55)*(-a34*a43 - a35*a53)) + a13*(a33*(a32*a33 + a34*a42 + a35*a52) + a34*(a32*a43 + a42*a44 + a45*a52) + a35*(a32*a53 + a42*a54 + a52*a55)) + a14*(a43*(a32*a33 + a34*a42 + a35*a52) + a44*(a32*a43 + a42*a44 + a45*a52) + a45*(a32*a53 + a42*a54 + a52*a55)) + a15*(a53*(a32*a33 + a34*a42 + a35*a52) + a54*(a32*a43 + a42*a44 + a45*a52) + a55*(a32*a53 + a42*a54 + a52*a55)) - (-a33 - a44 - a55)*(-a13*(a32*a33 + a34*a42 + a35*a52) - a14*(a32*a43 + a42*a44 + a45*a52) - a15*(a32*a53 + a42*a54 + a52*a55)) - (-a13*a32 - a14*a42 - a15*a52)*(-a33*(-a44 - a55) - a34*a43 - a35*a53 + a44*a55 - a45*a54) -a12*(-a23*(a44*a55 - a45*a54) - a24*(a43*a44 + a45*a53) - a25*(a43*a54 + a53*a55) + (-a44 - a55)*(-a24*a43 - a25*a53)) - a13*(a23*(a22*a23 + a24*a42 + a25*a52) + a24*(a22*a43 + a42*a44 + a45*a52) + a25*(a22*a53 + a42*a54 + a52*a55)) - a14*(a43*(a22*a23 + a24*a42 + a25*a52) + a44*(a22*a43 + a42*a44 + a45*a52) + a45*(a22*a53 + a42*a54 + a52*a55)) - a15*(a53*(a22*a23 + a24*a42 + a25*a52) + a54*(a22*a43 + a42*a44 + a45*a52) + a55*(a22*a53 + a42*a54 + a52*a55)) + (-a23 - a44 - a55)*(-a13*(a22*a23 + a24*a42 + a25*a52) - a14*(a22*a43 + a42*a44 + a45*a52) - a15*(a22*a53 + a42*a54 + a52*a55)) + (-a13*a22 - a14*a42 - a15*a52)*(-a23*(-a44 - a55) - a24*a43 - a25*a53 + a44*a55 - a45*a54) a12*(-a23*(a34*a55 - a35*a54) - a24*(a33*a34 + a35*a53) - a25*(a33*a54 + a53*a55) + (-a34 - a55)*(-a24*a33 - a25*a53)) + a13*(a23*(a22*a23 + a24*a32 + a25*a52) + a24*(a22*a33 + a32*a34 + a35*a52) + a25*(a22*a53 + a32*a54 + a52*a55)) + a14*(a33*(a22*a23 + a24*a32 + a25*a52) + a34*(a22*a33 + a32*a34 + a35*a52) + a35*(a22*a53 + a32*a54 + a52*a55)) + a15*(a53*(a22*a23 + a24*a32 + a25*a52) + a54*(a22*a33 + a32*a34 + a35*a52) + a55*(a22*a53 + a32*a54 + a52*a55)) - (-a23 - a34 - a55)*(-a13*(a22*a23 + a24*a32 + a25*a52) - a14*(a22*a33 + a32*a34 + a35*a52) - a15*(a22*a53 + a32*a54 + a52*a55)) - (-a13*a22 - a14*a32 - a15*a52)*(-a23*(-a34 - a55) - a24*a33 - a25*a53 + a34*a55 - a35*a54) -a12*(-a23*(a34*a45 - a35*a44) - a24*(a33*a34 + a35*a43) - a25*(a33*a44 + a43*a45) + (-a34 - a45)*(-a24*a33 - a25*a43)) - a13*(a23*(a22*a23 + a24*a32 + a25*a42) + a24*(a22*a33 + a32*a34 + a35*a42) + a25*(a22*a43 + a32*a44 + a42*a45)) - a14*(a33*(a22*a23 + a24*a32 + a25*a42) + a34*(a22*a33 + a32*a34 + a35*a42) + a35*(a22*a43 + a32*a44 + a42*a45)) - a15*(a43*(a22*a23 + a24*a32 + a25*a42) + a44*(a22*a33 + a32*a34 + a35*a42) + a45*(a22*a43 + a32*a44 + a42*a45)) + (-a23 - a34 - a45)*(-a13*(a22*a23 + a24*a32 + a25*a42) - a14*(a22*a33 + a32*a34 + a35*a42) - a15*(a22*a43 + a32*a44 + a42*a45)) + (-a13*a22 - a14*a32 - a15*a42)*(-a23*(-a34 - a45) - a24*a33 - a25*a43 + a34*a45 - a35*a44); a21*(-a33*(a44*a55 - a45*a54) - a34*(a43*a44 + a45*a53) - a35*(a43*a54 + a53*a55) + (-a44 - a55)*(-a34*a43 - a35*a53)) + a23*(a33*(a31*a33 + a34*a41 + a35*a51) + a34*(a31*a43 + a41*a44 + a45*a51) + a35*(a31*a53 + a41*a54 + a51*a55)) + a24*(a43*(a31*a33 + a34*a41 + a35*a51) + a44*(a31*a43 + a41*a44 + a45*a51) + a45*(a31*a53 + a41*a54 + a51*a55)) + a25*(a53*(a31*a33 + a34*a41 + a35*a51) + a54*(a31*a43 + a41*a44 + a45*a51) + a55*(a31*a53 + a41*a54 + a51*a55)) - (-a33 - a44 - a55)*(-a23*(a31*a33 + a34*a41 + a35*a51) - a24*(a31*a43 + a41*a44 + a45*a51) - a25*(a31*a53 + a41*a54 + a51*a55)) - (-a23*a31 - a24*a41 - a25*a51)*(-a33*(-a44 - a55) - a34*a43 - a35*a53 + a44*a55 - a45*a54) -a11*(-a33*(a44*a55 - a45*a54) - a34*(a43*a44 + a45*a53) - a35*(a43*a54 + a53*a55) + (-a44 - a55)*(-a34*a43 - a35*a53)) - a13*(a33*(a31*a33 + a34*a41 + a35*a51) + a34*(a31*a43 + a41*a44 + a45*a51) + a35*(a31*a53 + a41*a54 + a51*a55)) - a14*(a43*(a31*a33 + a34*a41 + a35*a51) + a44*(a31*a43 + a41*a44 + a45*a51) + a45*(a31*a53 + a41*a54 + a51*a55)) - a15*(a53*(a31*a33 + a34*a41 + a35*a51) + a54*(a31*a43 + a41*a44 + a45*a51) + a55*(a31*a53 + a41*a54 + a51*a55)) + (-a33 - a44 - a55)*(-a13*(a31*a33 + a34*a41 + a35*a51) - a14*(a31*a43 + a41*a44 + a45*a51) - a15*(a31*a53 + a41*a54 + a51*a55)) + (-a13*a31 - a14*a41 - a15*a51)*(-a33*(-a44 - a55) - a34*a43 - a35*a53 + a44*a55 - a45*a54) a11*(-a23*(a44*a55 - a45*a54) - a24*(a43*a44 + a45*a53) - a25*(a43*a54 + a53*a55) + (-a44 - a55)*(-a24*a43 - a25*a53)) + a13*(a23*(a21*a23 + a24*a41 + a25*a51) + a24*(a21*a43 + a41*a44 + a45*a51) + a25*(a21*a53 + a41*a54 + a51*a55)) + a14*(a43*(a21*a23 + a24*a41 + a25*a51) + a44*(a21*a43 + a41*a44 + a45*a51) + a45*(a21*a53 + a41*a54 + a51*a55)) + a15*(a53*(a21*a23 + a24*a41 + a25*a51) + a54*(a21*a43 + a41*a44 + a45*a51) + a55*(a21*a53 + a41*a54 + a51*a55)) - (-a23 - a44 - a55)*(-a13*(a21*a23 + a24*a41 + a25*a51) - a14*(a21*a43 + a41*a44 + a45*a51) - a15*(a21*a53 + a41*a54 + a51*a55)) - (-a13*a21 - a14*a41 - a15*a51)*(-a23*(-a44 - a55) - a24*a43 - a25*a53 + a44*a55 - a45*a54) -a11*(-a23*(a34*a55 - a35*a54) - a24*(a33*a34 + a35*a53) - a25*(a33*a54 + a53*a55) + (-a34 - a55)*(-a24*a33 - a25*a53)) - a13*(a23*(a21*a23 + a24*a31 + a25*a51) + a24*(a21*a33 + a31*a34 + a35*a51) + a25*(a21*a53 + a31*a54 + a51*a55)) - a14*(a33*(a21*a23 + a24*a31 + a25*a51) + a34*(a21*a33 + a31*a34 + a35*a51) + a35*(a21*a53 + a31*a54 + a51*a55)) - a15*(a53*(a21*a23 + a24*a31 + a25*a51) + a54*(a21*a33 + a31*a34 + a35*a51) + a55*(a21*a53 + a31*a54 + a51*a55)) + (-a23 - a34 - a55)*(-a13*(a21*a23 + a24*a31 + a25*a51) - a14*(a21*a33 + a31*a34 + a35*a51) - a15*(a21*a53 + a31*a54 + a51*a55)) + (-a13*a21 - a14*a31 - a15*a51)*(-a23*(-a34 - a55) - a24*a33 - a25*a53 + a34*a55 - a35*a54) a11*(-a23*(a34*a45 - a35*a44) - a24*(a33*a34 + a35*a43) - a25*(a33*a44 + a43*a45) + (-a34 - a45)*(-a24*a33 - a25*a43)) + a13*(a23*(a21*a23 + a24*a31 + a25*a41) + a24*(a21*a33 + a31*a34 + a35*a41) + a25*(a21*a43 + a31*a44 + a41*a45)) + a14*(a33*(a21*a23 + a24*a31 + a25*a41) + a34*(a21*a33 + a31*a34 + a35*a41) + a35*(a21*a43 + a31*a44 + a41*a45)) + a15*(a43*(a21*a23 + a24*a31 + a25*a41) + a44*(a21*a33 + a31*a34 + a35*a41) + a45*(a21*a43 + a31*a44 + a41*a45)) - (-a23 - a34 - a45)*(-a13*(a21*a23 + a24*a31 + a25*a41) - a14*(a21*a33 + a31*a34 + a35*a41) - a15*(a21*a43 + a31*a44 + a41*a45)) - (-a13*a21 - a14*a31 - a15*a41)*(-a23*(-a34 - a45) - a24*a33 - a25*a43 + a34*a45 - a35*a44); -a21*(-a32*(a44*a55 - a45*a54) - a34*(a42*a44 + a45*a52) - a35*(a42*a54 + a52*a55) + (-a44 - a55)*(-a34*a42 - a35*a52)) - a22*(a32*(a31*a32 + a34*a41 + a35*a51) + a34*(a31*a42 + a41*a44 + a45*a51) + a35*(a31*a52 + a41*a54 + a51*a55)) - a24*(a42*(a31*a32 + a34*a41 + a35*a51) + a44*(a31*a42 + a41*a44 + a45*a51) + a45*(a31*a52 + a41*a54 + a51*a55)) - a25*(a52*(a31*a32 + a34*a41 + a35*a51) + a54*(a31*a42 + a41*a44 + a45*a51) + a55*(a31*a52 + a41*a54 + a51*a55)) + (-a32 - a44 - a55)*(-a22*(a31*a32 + a34*a41 + a35*a51) - a24*(a31*a42 + a41*a44 + a45*a51) - a25*(a31*a52 + a41*a54 + a51*a55)) + (-a22*a31 - a24*a41 - a25*a51)*(-a32*(-a44 - a55) - a34*a42 - a35*a52 + a44*a55 - a45*a54) a11*(-a32*(a44*a55 - a45*a54) - a34*(a42*a44 + a45*a52) - a35*(a42*a54 + a52*a55) + (-a44 - a55)*(-a34*a42 - a35*a52)) + a12*(a32*(a31*a32 + a34*a41 + a35*a51) + a34*(a31*a42 + a41*a44 + a45*a51) + a35*(a31*a52 + a41*a54 + a51*a55)) + a14*(a42*(a31*a32 + a34*a41 + a35*a51) + a44*(a31*a42 + a41*a44 + a45*a51) + a45*(a31*a52 + a41*a54 + a51*a55)) + a15*(a52*(a31*a32 + a34*a41 + a35*a51) + a54*(a31*a42 + a41*a44 + a45*a51) + a55*(a31*a52 + a41*a54 + a51*a55)) - (-a32 - a44 - a55)*(-a12*(a31*a32 + a34*a41 + a35*a51) - a14*(a31*a42 + a41*a44 + a45*a51) - a15*(a31*a52 + a41*a54 + a51*a55)) - (-a12*a31 - a14*a41 - a15*a51)*(-a32*(-a44 - a55) - a34*a42 - a35*a52 + a44*a55 - a45*a54) -a11*(-a22*(a44*a55 - a45*a54) - a24*(a42*a44 + a45*a52) - a25*(a42*a54 + a52*a55) + (-a44 - a55)*(-a24*a42 - a25*a52)) - a12*(a22*(a21*a22 + a24*a41 + a25*a51) + a24*(a21*a42 + a41*a44 + a45*a51) + a25*(a21*a52 + a41*a54 + a51*a55)) - a14*(a42*(a21*a22 + a24*a41 + a25*a51) + a44*(a21*a42 + a41*a44 + a45*a51) + a45*(a21*a52 + a41*a54 + a51*a55)) - a15*(a52*(a21*a22 + a24*a41 + a25*a51) + a54*(a21*a42 + a41*a44 + a45*a51) + a55*(a21*a52 + a41*a54 + a51*a55)) + (-a22 - a44 - a55)*(-a12*(a21*a22 + a24*a41 + a25*a51) - a14*(a21*a42 + a41*a44 + a45*a51) - a15*(a21*a52 + a41*a54 + a51*a55)) + (-a12*a21 - a14*a41 - a15*a51)*(-a22*(-a44 - a55) - a24*a42 - a25*a52 + a44*a55 - a45*a54) a11*(-a22*(a34*a55 - a35*a54) - a24*(a32*a34 + a35*a52) - a25*(a32*a54 + a52*a55) + (-a34 - a55)*(-a24*a32 - a25*a52)) + a12*(a22*(a21*a22 + a24*a31 + a25*a51) + a24*(a21*a32 + a31*a34 + a35*a51) + a25*(a21*a52 + a31*a54 + a51*a55)) + a14*(a32*(a21*a22 + a24*a31 + a25*a51) + a34*(a21*a32 + a31*a34 + a35*a51) + a35*(a21*a52 + a31*a54 + a51*a55)) + a15*(a52*(a21*a22 + a24*a31 + a25*a51) + a54*(a21*a32 + a31*a34 + a35*a51) + a55*(a21*a52 + a31*a54 + a51*a55)) - (-a22 - a34 - a55)*(-a12*(a21*a22 + a24*a31 + a25*a51) - a14*(a21*a32 + a31*a34 + a35*a51) - a15*(a21*a52 + a31*a54 + a51*a55)) - (-a12*a21 - a14*a31 - a15*a51)*(-a22*(-a34 - a55) - a24*a32 - a25*a52 + a34*a55 - a35*a54) -a11*(-a22*(a34*a45 - a35*a44) - a24*(a32*a34 + a35*a42) - a25*(a32*a44 + a42*a45) + (-a34 - a45)*(-a24*a32 - a25*a42)) - a12*(a22*(a21*a22 + a24*a31 + a25*a41) + a24*(a21*a32 + a31*a34 + a35*a41) + a25*(a21*a42 + a31*a44 + a41*a45)) - a14*(a32*(a21*a22 + a24*a31 + a25*a41) + a34*(a21*a32 + a31*a34 + a35*a41) + a35*(a21*a42 + a31*a44 + a41*a45)) - a15*(a42*(a21*a22 + a24*a31 + a25*a41) + a44*(a21*a32 + a31*a34 + a35*a41) + a45*(a21*a42 + a31*a44 + a41*a45)) + (-a22 - a34 - a45)*(-a12*(a21*a22 + a24*a31 + a25*a41) - a14*(a21*a32 + a31*a34 + a35*a41) - a15*(a21*a42 + a31*a44 + a41*a45)) + (-a12*a21 - a14*a31 - a15*a41)*(-a22*(-a34 - a45) - a24*a32 - a25*a42 + a34*a45 - a35*a44); a21*(-a32*(a43*a55 - a45*a53) - a33*(a42*a43 + a45*a52) - a35*(a42*a53 + a52*a55) + (-a43 - a55)*(-a33*a42 - a35*a52)) + a22*(a32*(a31*a32 + a33*a41 + a35*a51) + a33*(a31*a42 + a41*a43 + a45*a51) + a35*(a31*a52 + a41*a53 + a51*a55)) + a23*(a42*(a31*a32 + a33*a41 + a35*a51) + a43*(a31*a42 + a41*a43 + a45*a51) + a45*(a31*a52 + a41*a53 + a51*a55)) + a25*(a52*(a31*a32 + a33*a41 + a35*a51) + a53*(a31*a42 + a41*a43 + a45*a51) + a55*(a31*a52 + a41*a53 + a51*a55)) - (-a32 - a43 - a55)*(-a22*(a31*a32 + a33*a41 + a35*a51) - a23*(a31*a42 + a41*a43 + a45*a51) - a25*(a31*a52 + a41*a53 + a51*a55)) - (-a22*a31 - a23*a41 - a25*a51)*(-a32*(-a43 - a55) - a33*a42 - a35*a52 + a43*a55 - a45*a53) -a11*(-a32*(a43*a55 - a45*a53) - a33*(a42*a43 + a45*a52) - a35*(a42*a53 + a52*a55) + (-a43 - a55)*(-a33*a42 - a35*a52)) - a12*(a32*(a31*a32 + a33*a41 + a35*a51) + a33*(a31*a42 + a41*a43 + a45*a51) + a35*(a31*a52 + a41*a53 + a51*a55)) - a13*(a42*(a31*a32 + a33*a41 + a35*a51) + a43*(a31*a42 + a41*a43 + a45*a51) + a45*(a31*a52 + a41*a53 + a51*a55)) - a15*(a52*(a31*a32 + a33*a41 + a35*a51) + a53*(a31*a42 + a41*a43 + a45*a51) + a55*(a31*a52 + a41*a53 + a51*a55)) + (-a32 - a43 - a55)*(-a12*(a31*a32 + a33*a41 + a35*a51) - a13*(a31*a42 + a41*a43 + a45*a51) - a15*(a31*a52 + a41*a53 + a51*a55)) + (-a12*a31 - a13*a41 - a15*a51)*(-a32*(-a43 - a55) - a33*a42 - a35*a52 + a43*a55 - a45*a53) a11*(-a22*(a43*a55 - a45*a53) - a23*(a42*a43 + a45*a52) - a25*(a42*a53 + a52*a55) + (-a43 - a55)*(-a23*a42 - a25*a52)) + a12*(a22*(a21*a22 + a23*a41 + a25*a51) + a23*(a21*a42 + a41*a43 + a45*a51) + a25*(a21*a52 + a41*a53 + a51*a55)) + a13*(a42*(a21*a22 + a23*a41 + a25*a51) + a43*(a21*a42 + a41*a43 + a45*a51) + a45*(a21*a52 + a41*a53 + a51*a55)) + a15*(a52*(a21*a22 + a23*a41 + a25*a51) + a53*(a21*a42 + a41*a43 + a45*a51) + a55*(a21*a52 + a41*a53 + a51*a55)) - (-a22 - a43 - a55)*(-a12*(a21*a22 + a23*a41 + a25*a51) - a13*(a21*a42 + a41*a43 + a45*a51) - a15*(a21*a52 + a41*a53 + a51*a55)) - (-a12*a21 - a13*a41 - a15*a51)*(-a22*(-a43 - a55) - a23*a42 - a25*a52 + a43*a55 - a45*a53) -a11*(-a22*(a33*a55 - a35*a53) - a23*(a32*a33 + a35*a52) - a25*(a32*a53 + a52*a55) + (-a33 - a55)*(-a23*a32 - a25*a52)) - a12*(a22*(a21*a22 + a23*a31 + a25*a51) + a23*(a21*a32 + a31*a33 + a35*a51) + a25*(a21*a52 + a31*a53 + a51*a55)) - a13*(a32*(a21*a22 + a23*a31 + a25*a51) + a33*(a21*a32 + a31*a33 + a35*a51) + a35*(a21*a52 + a31*a53 + a51*a55)) - a15*(a52*(a21*a22 + a23*a31 + a25*a51) + a53*(a21*a32 + a31*a33 + a35*a51) + a55*(a21*a52 + a31*a53 + a51*a55)) + (-a22 - a33 - a55)*(-a12*(a21*a22 + a23*a31 + a25*a51) - a13*(a21*a32 + a31*a33 + a35*a51) - a15*(a21*a52 + a31*a53 + a51*a55)) + (-a12*a21 - a13*a31 - a15*a51)*(-a22*(-a33 - a55) - a23*a32 - a25*a52 + a33*a55 - a35*a53) a11*(-a22*(a33*a45 - a35*a43) - a23*(a32*a33 + a35*a42) - a25*(a32*a43 + a42*a45) + (-a33 - a45)*(-a23*a32 - a25*a42)) + a12*(a22*(a21*a22 + a23*a31 + a25*a41) + a23*(a21*a32 + a31*a33 + a35*a41) + a25*(a21*a42 + a31*a43 + a41*a45)) + a13*(a32*(a21*a22 + a23*a31 + a25*a41) + a33*(a21*a32 + a31*a33 + a35*a41) + a35*(a21*a42 + a31*a43 + a41*a45)) + a15*(a42*(a21*a22 + a23*a31 + a25*a41) + a43*(a21*a32 + a31*a33 + a35*a41) + a45*(a21*a42 + a31*a43 + a41*a45)) - (-a22 - a33 - a45)*(-a12*(a21*a22 + a23*a31 + a25*a41) - a13*(a21*a32 + a31*a33 + a35*a41) - a15*(a21*a42 + a31*a43 + a41*a45)) - (-a12*a21 - a13*a31 - a15*a41)*(-a22*(-a33 - a45) - a23*a32 - a25*a42 + a33*a45 - a35*a43); -a21*(-a32*(a43*a54 - a44*a53) - a33*(a42*a43 + a44*a52) - a34*(a42*a53 + a52*a54) + (-a43 - a54)*(-a33*a42 - a34*a52)) - a22*(a32*(a31*a32 + a33*a41 + a34*a51) + a33*(a31*a42 + a41*a43 + a44*a51) + a34*(a31*a52 + a41*a53 + a51*a54)) - a23*(a42*(a31*a32 + a33*a41 + a34*a51) + a43*(a31*a42 + a41*a43 + a44*a51) + a44*(a31*a52 + a41*a53 + a51*a54)) - a24*(a52*(a31*a32 + a33*a41 + a34*a51) + a53*(a31*a42 + a41*a43 + a44*a51) + a54*(a31*a52 + a41*a53 + a51*a54)) + (-a32 - a43 - a54)*(-a22*(a31*a32 + a33*a41 + a34*a51) - a23*(a31*a42 + a41*a43 + a44*a51) - a24*(a31*a52 + a41*a53 + a51*a54)) + (-a22*a31 - a23*a41 - a24*a51)*(-a32*(-a43 - a54) - a33*a42 - a34*a52 + a43*a54 - a44*a53) a11*(-a32*(a43*a54 - a44*a53) - a33*(a42*a43 + a44*a52) - a34*(a42*a53 + a52*a54) + (-a43 - a54)*(-a33*a42 - a34*a52)) + a12*(a32*(a31*a32 + a33*a41 + a34*a51) + a33*(a31*a42 + a41*a43 + a44*a51) + a34*(a31*a52 + a41*a53 + a51*a54)) + a13*(a42*(a31*a32 + a33*a41 + a34*a51) + a43*(a31*a42 + a41*a43 + a44*a51) + a44*(a31*a52 + a41*a53 + a51*a54)) + a14*(a52*(a31*a32 + a33*a41 + a34*a51) + a53*(a31*a42 + a41*a43 + a44*a51) + a54*(a31*a52 + a41*a53 + a51*a54)) - (-a32 - a43 - a54)*(-a12*(a31*a32 + a33*a41 + a34*a51) - a13*(a31*a42 + a41*a43 + a44*a51) - a14*(a31*a52 + a41*a53 + a51*a54)) - (-a12*a31 - a13*a41 - a14*a51)*(-a32*(-a43 - a54) - a33*a42 - a34*a52 + a43*a54 - a44*a53) -a11*(-a22*(a43*a54 - a44*a53) - a23*(a42*a43 + a44*a52) - a24*(a42*a53 + a52*a54) + (-a43 - a54)*(-a23*a42 - a24*a52)) - a12*(a22*(a21*a22 + a23*a41 + a24*a51) + a23*(a21*a42 + a41*a43 + a44*a51) + a24*(a21*a52 + a41*a53 + a51*a54)) - a13*(a42*(a21*a22 + a23*a41 + a24*a51) + a43*(a21*a42 + a41*a43 + a44*a51) + a44*(a21*a52 + a41*a53 + a51*a54)) - a14*(a52*(a21*a22 + a23*a41 + a24*a51) + a53*(a21*a42 + a41*a43 + a44*a51) + a54*(a21*a52 + a41*a53 + a51*a54)) + (-a22 - a43 - a54)*(-a12*(a21*a22 + a23*a41 + a24*a51) - a13*(a21*a42 + a41*a43 + a44*a51) - a14*(a21*a52 + a41*a53 + a51*a54)) + (-a12*a21 - a13*a41 - a14*a51)*(-a22*(-a43 - a54) - a23*a42 - a24*a52 + a43*a54 - a44*a53) a11*(-a22*(a33*a54 - a34*a53) - a23*(a32*a33 + a34*a52) - a24*(a32*a53 + a52*a54) + (-a33 - a54)*(-a23*a32 - a24*a52)) + a12*(a22*(a21*a22 + a23*a31 + a24*a51) + a23*(a21*a32 + a31*a33 + a34*a51) + a24*(a21*a52 + a31*a53 + a51*a54)) + a13*(a32*(a21*a22 + a23*a31 + a24*a51) + a33*(a21*a32 + a31*a33 + a34*a51) + a34*(a21*a52 + a31*a53 + a51*a54)) + a14*(a52*(a21*a22 + a23*a31 + a24*a51) + a53*(a21*a32 + a31*a33 + a34*a51) + a54*(a21*a52 + a31*a53 + a51*a54)) - (-a22 - a33 - a54)*(-a12*(a21*a22 + a23*a31 + a24*a51) - a13*(a21*a32 + a31*a33 + a34*a51) - a14*(a21*a52 + a31*a53 + a51*a54)) - (-a12*a21 - a13*a31 - a14*a51)*(-a22*(-a33 - a54) - a23*a32 - a24*a52 + a33*a54 - a34*a53) -a11*(-a22*(a33*a44 - a34*a43) - a23*(a32*a33 + a34*a42) - a24*(a32*a43 + a42*a44) + (-a33 - a44)*(-a23*a32 - a24*a42)) - a12*(a22*(a21*a22 + a23*a31 + a24*a41) + a23*(a21*a32 + a31*a33 + a34*a41) + a24*(a21*a42 + a31*a43 + a41*a44)) - a13*(a32*(a21*a22 + a23*a31 + a24*a41) + a33*(a21*a32 + a31*a33 + a34*a41) + a34*(a21*a42 + a31*a43 + a41*a44)) - a14*(a42*(a21*a22 + a23*a31 + a24*a41) + a43*(a21*a32 + a31*a33 + a34*a41) + a44*(a21*a42 + a31*a43 + a41*a44)) + (-a22 - a33 - a44)*(-a12*(a21*a22 + a23*a31 + a24*a41) - a13*(a21*a32 + a31*a33 + a34*a41) - a14*(a21*a42 + a31*a43 + a41*a44)) + (-a12*a21 - a13*a31 - a14*a41)*(-a22*(-a33 - a44) - a23*a32 - a24*a42 + a33*a44 - a34*a43)]

    return inv_matrix./det
end

